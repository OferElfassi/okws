{%
    locals { rfn3_lib_doc : {} }

    rfn3_lib_doc = {
	
	rand : {
	    input : [ { a1 : "i" }, { a2 : "i", opt : true } ],
	    output : "i",
	    desc : "Given one argument (//a1//), outputs an integer randomly
between 0 and //a1//.  Given two (a1 and a1), outputs an integer randomly
between //a1// and //a2//"
	},
	
	len : {
	    input : [ { o : "O" } ],
	    output : "u",
	    desc : "Given an input object //o//, returns its length.  
If //o// is a string, return the length of //s//.  If it is a list,
return the number of elements in the list.  If it is a dictionary,
return the number of bound pairs in the dictionary."
	},

	range : { 
	    input : [ { a1 : "i" }, { a2 : "i", opt : true }, { a3 : "i" } ],
	    output : "l",
	    desc : "If called with one argument (//a1//), output a integers
in [0,//a1//). If called with two arguments (//a1// and //a2//), output 
a list of integers in [//a1//, //a2//). If called with three arguments, 
//a3// is the step between elements."
	},

	isnull : {
	    input : [ { o : "O" } ],
	    output : "b",
	    desc : "Output //True// if //o// is //null// and false otherwise."
	},

	join : {
	    input : [ { delim : "s", l : "l" }],
	    output : "s",
	    desc : "Take the list of strings //l// and join them together
with the delimiter //delim//.  Output a string."
	},

	strip : {
	    input : [ { s : "s" } ],
	    output : "s",
	    desc : "Strips leading, trailing spaces and reduce in-between 
spaces to just one space"
	},
	
	substr : {
	    input : [ { s : "s"}, {start : "i"}, {len : "i" } ],
	    output : "s",
	    desc : "Output a substring of //s//, starting at 
character //start// and //len// bytes long."
	},
	    
	split : { 
	    input: [ { r : "r"} , { s : "s"} ],
	    output : "l",
	    desc : "Given a regex //r// and a string //s//, split //s// into
a list of strings, akin to the Python function 'split'.  Return a list
of strings."
	},
	
	match : {
	    input : [ { r : "r" }, {s : "s" } ],
	    output : "b",
	    desc : "Given a regex //r// and a string //s//, return //true//
if //r// matches the **whole** string //s// and //false// otherwise."
	},

	search : {
	    input : [ { r : "r"}, { s : "s"} ],
	    output : "b",
	    desc : "Given a regex //r// and a string //s//, return //true//
if //r// is found in //s// and //false// otherwise."
	},

	tolower : {
	    input : [ { s : "s" } ],
	    output : "s",
	    desc : "Convert all alpha characters in //s// to lowercase"
	},
	
	toupper : {
	    input : [ { s : "s" } ],
	    output : "s",
	    desc : "Convert all alpha characters in //s// to uppercase"
	},

	html_escape : {
	    input : [ { s : "s"} ],
	    output : "s",
	    desc : "HTML escapes these chars: & < >"
	},

	json_escape : {
	    input : [ { s : "s"} ],
	    output : "s",
	    desc : "Escapes all double-quotes, backslashes, newlines and tabs."
	},

	"default" : {
	    input : [ { in : "O" }, { val : "O", opt : true } ],
	    output : "O",
	    desc : "Given the input value //in//, check to see if it's 
//null.//  If //null//, then output //val//, outherwise, output //in//.
If //val// wasn't specified and //in// is null, then output the empty
string ''"
	},

	append : {
	    input : [ { v : "l" }, { o : "O" } ],
	    output : "n",
	    desc : "Given the list //v//, append onto it the
object //o//.  There is no output; changes are made to //v// directly.",
	    example : '{% locals { d : { x : "hi" } } %}
\%{d.y|default("bye")} will output "bye"
\%{d.z|default} will output "" and will not produce any warnings.'
	},

	map : {

	    input : [ { d : "d" }, { o : "O" }],
	    output : "O",
	    desc : "Map every element in //o// to the value in the
dictionary //d//, more or less. If //o// is a list, then map each
element of the list via //d//.  If //o// is a dictionary, map the 
values of //o// through //d//.",
	    example : '{% locals { x : { "a" : "A", "b" : "B" }, v : [ "a", "b", "c" ], d : { "xx" : "a" } } %}
\%{map(x,v)} will output ["A", "B", null]
\%{map(x,d)} will output { "xx" : "A" }'
	},

	tag_escape : {
	    
	    input : [ { s : "s" } ],
	    output : "s",
	    desc : "Escape all tags except for <b>, <i>, <br> and <p>."
	},

	url_escape : {
	    input : [ { s : "s" } ],
	    output : "s",
	    desc : "Produce a URL-encoded version of the string //s//"
	},

	url_unescape : {
	    input : [ { s : "s" } ],
	    output : "s",
	    desc : "Take a URL-escaped string //s// and return the unescaping
of it."
	},

	sha1 : {
	    input : [ { s : "s"} ],
	    output : "s",
	    desc : "Produce the SHA-1 hash of //s//, outputting a 
hexidecimal-encoded digest."
	},

	type : {
	    input : [ { o : "O" } ],
	    output : "s",
	    desc : "Given object //o//, output its type.
Possible values are undef, list, str, dict."
	},

	items : {
	    input : [ { d : "d" } ],
	    output : "l",
	    desc : "Return the list of items in the dictionary. Each
item is represented as a list of 2 elemenents, the first being the
key and the second being the value."
	},

	keys : {
	    input : [ { d : "d" } ],
	    output : "l",
	    desc : "Returns a list of keys in a dictionary"
	},

	values : {
	    input : [ { d : "d" } ],
	    output : "l",
	    desc : "Returns a list of values in a dictionary"
	},
	
	json2pub : {
	    input : [ { s : "s" } ],
	    output : "O",
	    desc : "Converts a string into a JSON-encoded object"
	},

	import : {
	    input : [ { d : "d" } ],
	    output : "n",
	    desc : "Take the given dictionary and import it into the environment
as local bindings."
	},

	version_str : {
	    output : "s",
	    desc : "Output the version of this rfn3 library (%{version_str()})
in dotted string notation." 
	},
	
	version_int : {
	    output : "i",
	    desc : "Output the version of this rfn3 library (%{version_int()})
in integer representation."

	},

	okws_version_str : {
	    output : "s",
	    desc : "Output the version of this OKWS instance 
(%{okws_version_str()}) in dotted string notation." 
	},
	
	okws_version_int : {
	    output : "i",
	    desc : "Output the version of this OKWS library 
(%{okws_version_int()}) in integer representation."

	},

	now :  {
	    output : "u",
	    desc : "Output the time now in Unix-timestamp"
	},

	time_format : {
	    input : [ { time : "u" }, { fmt : "s" } ],
	    output : "s",
	    desc : "Like strftime, format the Unix timestamp //time//
according to the format  //fmt//",
	    example : ={{ \%{time_format (now(), '%a, %d %b %Y %H:%M:%S GMT')} : %{time_format (now(), '%a, %d %b %Y %H:%M:%S GMT')} }}
	    },

	days_from_now : {
	    input : [ { days : "i" }],
	    output : "u",
	    desc : "Return the Unix timestamp of //days// days from now"
	},

	time_from_now : {
	    input : [ { d: "i", opt : true }, { h: "i" }, { m : "i" }, { s: "i" } ],
	    output : "u",
	    desc : "Output the Unix timestamp at //d// days, //h// hours,
//m// minutes and //s// seconds from now"
	},

	strptime : {
	    input : [ { time : "s" }, { fmt : "s", opt : true } ],
	    output : "s",
	    desc : "Read from the string //time//, formatted 
according to the format string //fmt//, into a UNIX timestamp.
If no //fmt// is given, assume '%F', which means 'YYYY-MM-DD'"
	},

	decorate : {
	    input : [ { l : "l" } ],
	    output : "l",
	    desc : "Given a list of dictionaries //l//, annotate each
row in the dictionary with a //first//, //last//, //iter//, //even//
and //odd// field.  This is mainly a holdover from a previous OKWS."
	},

	enumerate : {
	    input : [ { l : "l" } ],
	    output : "l",
	    desc : "Given a list //l//, output a list of lists,
in which the //i//th element is the pair [//i//, //l//[//i//] ]"
	},

	dump_env :  {
	    output : "d",
	    desc : "Return a dump of the environment; useful for 
debugging purposes."
	},

	contains : {
	    input : [ { l : "l" }, { o : "O" } ],
	    output : "b",
	    desc : "Return //true// if the list //l// contains the object
//o// and //false// otherwise.  If you find yourself using this a lot,
consider using a dictionary instead, which has faster lookup times."
	},

	int : {
	    input : [ { o : "O" } ],
	    output : "i",
	    desc : "Coerces the object //o// into an integer, if at all possible.  Returns 0 on failure and the conversion otherwise."
	},

	round : {
	    input : [ { f : "f" } ],
	    output : "i",
	    desc : "Round the input float //f// to the nearest integer."
	},

	ceil : {
	    input : [ { f : "f" } ],
	    output : "i",
	    desc : "Return the smallest integer //i// such that //i >= f//."
	},

	floor : {
	    input : [ { f : "f" } ],
	    output : "i",
	    desc : "Return the largest integer //i// such that //i <= f//."
	},

	str : {
	    input : [ { o : "O" } ],
	    output : "s",
	    desc : "Return the stringified version of the object //o//."
	},

	warn : {
	    input : [ { s : "s" } ],
	    output : "n",
	    desc : "Output the string //s// as an error, both to the page
and to the log."
	},

	logwarn : {
	    input : [ { s : "s" }, { prefix : "b", opt : true } ],
	    output : "n",
	    desc : "Output the string //s// as an error to the log (not to 
the page); prefix with okws-pub3[logwarn] if the specified flag is true
(and it is true by default)."
	},

	warn_trace : {
	    input : [ { s : "s" } ],
	    output : "n",
	    desc : "Output the string //s// and the current include
stacktrace as an error, both to the page and to the log."
	},

	enable_wss : {
	    input : [ { b : "b" } ],
	    output : "n",
	    desc : "Set white-space-stripping mode to //b//, either
enabling it or disabled it.  WSS is off by default."
	},
	
	internal_dump : {
	    input : [ { o : "O" } ],
	    output : "s",
	    desc : "Return the okws-pub3 internals of the object //o//"
	},

	unbind : {
	    input : [ { var : "s" }, { scope : "s", opt : true } ],
	    output : "n",
	    desc : "Unbind the variable //var// from the environment.
If //scope// is not specified, then assume first found binding.  Can
explicitly specify 'l' for 'local', 'g' for 'global', or 'u'
for 'universals."
	},

	copy : {
	    input : [ { o : "o" } ],
	    output : "o",
	    desc : "Return a copy of the input object //o//."
	},

	bind : {
	    input : [ { key : "s" }, { obj : "o" }, { scope : "s", opt : true } ],
	    output : "n",
	    desc : "Bind the object //obj// to the key //key// in the 
environment. If //scope// is not specified, make it a local binding.  Otherwise,
can specify the scope explicitly: 'l' for 'local', 'g' for 'global',
or 'u' for 'universals."
	},

	list : {
	    input : [ { o : "O" } ],
	    output : "l",
	    desc : "Output object //o// as a list.  If //o// is
a list to begin with, just output //o//.  If //o// is a string,
output the list of characters that compose //o//. If //o//
is a dictionary, act like the //items// call."
	},
	sort : { 
	    input : [ { l : "l" }, { cmp : "F", opt : true } ],
	    output : "l",
	    desc : "Sort the given list //l//, given the comparison
function //cmp//.  If //cmp// isn't specified, then use the 
default comparison operatore.  If it is, use it!"
	},

	cmp : {
	    input : [ { a : "O" }, { b : "O" } ],
	    output : "i",
	    desc : "The standard comparison function. Will return
-1 for a < b, 1 for a > b and 0 for a == b.  Will compare strings
or integers, nothing else."
	},

	utf8_fix : {
	    input : [ { s : "s" } ],
	    output : "s",
	    desc : "Strips out any malformed UTF-8 characters from //s//
and returns the fixed string." 
	},

	lookup : {
	    input : [ { k : "s" }, {"scope" : s } ],
	    output : "O",
	    desc : "Lookup the key //k// in the environment.
If no //scope// is specified, find the first natural result.
Otherwise, limit the search to the scope given by //scope//.
See //unbind// or //bind// for how to specify scope."
	},
	
	pop_front : {
	    input : [ { l : "l" } ],
	    output : "O",
	    desc : "Pop the first object off the list //l//
and return it."
	},
	
	format_float : {
	    input : [ { fmt : "s" }, { val : "f" } ],
	    output : "s",
	    desc : "Format the float //val// accoring to the given sprintf-style
format string //fmt//."
	},

	format_int : {
	    input : [ { fmt : "s" }, { val : "i" } ],
	    output : "s",
	    desc : "Format the int //val// accoring to the given sprintf-style
format string //fmt//."
	},

	replace : {
	    input : [ { body : "s" }, { pat : "r" }, { repl : "O" } ,
	              { "use_captures" : "b", opt : "true" } ],
	    output : "s",
	    desc : "In the string //body//, find all occurrence of 
the regular expression //pat// and replace with the string //repl//,
or the output of the lambda //repl//.  By default, a string //repl//
can contain Perl-like capture groups (e.g., '<b>$0</b>'), but if you
don't want that, pass a fourth optional parameter //use_captures//
as //false//.",
	    example : '{% locals { body : "the URL is foo.com." }
print (replace (body, "[a-z.]+(com|edu)", "$1:$0"));
print (" ");
print (replace (body, "[a-z.]+(com|edu)", 
                lambda (v) { return ("\%{toupper(v[1])}:\%{v[0]}"); }));
%}
will output: "the URL is com:foo.com. the URL is COM:foo.com."'
         },

         reverse : {
	     input : [ { "v" : "l" } ],
             output : "l",
             desc : "Reverse the input list //in place//.  Return the reversed
list."
         },

         bitwise_or : { 
	     input : [ { "a1" : "u" }, {"a2" : "u" } ],
	     output : "u",
	     desc : "Compute the bitwise OR of the two arguments. Can take 
arbitrarily many arguments, but only two are shown here."
	 },

	 bitwise_and : {
	     input : [ { "a1" : "u" }, {"a2" : "u" } ],
	     output : "u",
	     desc : "Compute the bitwise AND of the two arguments. Can take 
arbitrarily many arguments, but only two are shown here."
	 },
	 
	 shuffle : {
	    input : [ {"v" : "l" } ],
	    output : "l",
	    desc : "Shuffle the input list //in place//.  Return the
shuffled list."
	 },

	 randsel : {
	    input : [ { "v" : "l" } ],
	    output : "l",
	    desc : "Select a random element from the list //l//.  Return
a tuple, with the element in the 0th slot, and the index of the element
in the 1st slot.  Don't modify the list."
         },
	 
	 exp : {
	    input : [ { "x" : "f" } ],
	    output : "f",
	    desc  : "The C-library exp() function."
	 },

	 log : {
	    input : [ { "x" : "f" } ],
	    output : "f",
	    desc  : "The C-library log() function."
	 },

	 sqrt : {
	    input : [ { "x" : "f" } ],
	    output : "f",
	    desc  : "The C-library sqrt() function."
	 },

	 pow : {
	    input : [ { "base" : "f" }, { "exp" : "f" } ],
	    output : "f",
	    desc  : "The C-library pow() function."
	 },

	 splice : {
	    input : [ { "v" : "l" }, { "index" : "i" }, { "remove" : "r" },
	    	      { "o_1" : "O" }, { "o_2" : "O" }, { "o_3" : "O" } ] ,
            output : "l",
	    desc : "Like JS's splice() function. Remove //remove// objects
from the list //v// starting at index //index//.  Replace with optional
objects //o_1//, through //o_n//, as many as specified."
	 },

     hidden_escape : {
        input: [ { "s" : "s" } ],
        output : "s",
        desc : "HTML escapes these chars: \' \" & < >"
     },

     wss_filter : {
        input: [ { "s" : "s" } ],
        output : "s",
        desc : "compacts multiple adjacent whitespace characters into one"
     },

     sleep : {
        blocking : true,
        input: [ { "s" : "i" }, { "ms" : "i" } ],
        output : "0",
        desc : "sleeps for s seconds and ms milliseconds"
     },

     fork : {
        input: [ { "func" : "F" } ],
        output : "0",
        desc : "returns immediately and executes an async function in the background"
     },

     shotgun : {
        blocking : true,
        input: [ { "funcs" : "l" } ],
        output : "0",
        desc : "executes a list of async functions in parallel, returns when they've all completed"
     }
    

    };
    
    docs.rfn3 = rfn3_lib_doc;
%}

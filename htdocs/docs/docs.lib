{%
    globals { docs : {} }

    docs = {

	format_markup : lambda (x, find, repl) {
	    
	    locals {
		l : split (find, x), out : []
	    }

	    for (p, enumerate (l)) {
		if (p[0] % 2 == 0) {
		    append (out, p[1]);
		} elif (p[0] < len(l) - 1) {
		    append (out, "<%{repl}>%{p[1]}</%{repl}>");
		}
	    }
	    if (len (l) % 2 == 0) { append (out, l[-1]); }
	    return (join ("", out));
	},

	format_wiki : lambda (s) {
	    return s|docs.format_markup ("//", "i")|
	       docs.format_markup(r{\*\*}, "b");
	},

	h : lambda (i, s) {
	    return ("<h%{i}>%{s}</h%{i}>");
	},

	format_args : lambda (args) {
	    locals { optional : "", tmp  : [] }
	    append (tmp, "<ul>");
	    
	    for (arg, args) {
		if (arg.opt) { optional = "(optional)"; }
		append (tmp, docs.format_arg (arg, optional));
	    }
	    append (tmp, "</ul>");
	    return (join ("\n", tmp));
	}, 
	
	types : { "i" : "integer",
		  "O" : "generic object",
		  "t" : "time",
		  "s" : "string",
		  "l" : "list",
		  "r" : "regular expression",
		  "u" : "unsigned integer",
		  "b" : "boolean",
		  "n" : "null",
		  "d" : "dictionary",
		  "f" : "float",
		  "F" : "function" },

	format_arg : lambda (arg, optional) {

	    for (p, items (arg)) {
		if (p[0] != "opt") {
		    return ("<li><i>%{p[0]}</i> &mdash; " +
			    "%{docs.types[p[1]]} %{optional}</li>");
		}
	    }
	    return ("none");
	},

	format_ret : lambda (s) {
	    return ("<ul><li>%{docs.types[s]}</li></ul>");
	},

	format_func : lambda (f, args) {
	    locals { v : [], in_opt : false }
	    for (arg, args) {
		locals { x : "" }
		if (arg.opt && !in_opt) {
		    x = "[";
		    in_opt = true;
		}
		for (i, keys (arg)) {
		    if (i != "opt") { 
			x = x + i ;
			append (v, x); 
			break; 
		    }
		}
	    } empty {}
	    if (in_opt) {
		v[-1] = v[-1] + "]";
	    }
	    locals { r = f + " (" + join (", ", v) + ")" }
	    return (r) ;
	},

	format_function : lambda (k, v) {
	    locals { fields : [] }
	    append (fields, docs.h (2, docs.format_func (k, v.input)));
	    if (v.input) {
		append (fields, docs.h (3, "Input Arguments"));
		append (fields, docs.format_args (v.input));
	    }
	    append (fields, docs.h (3, "Output"));
	    append (fields, docs.format_ret (v.output));
	    append (fields, docs.h (3, "Description"));
	    append (fields, docs.format_wiki (v.desc|html_escape));
	    if (v.example) {
		append (fields, docs.h (3, "Example"));
		append (fields, "<pre>%{v.example}</pre>\n" );
	    }
	    print (join ("\n", fields));
	},

	format_library : lambda (name, lib) {
	    print (docs.h (1, "Runtime Libray %{name}"), "\n");
	    for (k, sort (keys (lib))) {
		docs.format_function (k, lib[k]);
		print ("<br/><br/><hr/>\n");
	    }
	},

	version : 1
    };
%}

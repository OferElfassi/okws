##
## $Id$
##
## This is the primary okd configuration file, which is typcially placed
## in /usr/local/okws/conf.  This file needs to be editted before your
## OKWS will work.  By default, currently, OKWS does not come with any
## compiled modules, though in future versions, it might....
##

##
## BindAddr <ip-addr> <port>
##
##   tells okd which IP address to bind to, and which port to listen on.
##   Default port is 80.
##  	
BindAddr 	0.0.0.0 80

##
## ListenPorts <ports>
##
##   One might want okd to listen for incoming HTTP connections on
##   more than one port.  Specify those ports here.  Note that
##   the port given in "BindAddr" above will still be the implicit
##   (and primary) port that okd listens on.
##
##
#ListenPorts 80 8080 8011


##
## JailDir <dir>
##
##   All services run by okd will be in a chroot jail, assuming that okd
##   is started as root.  Specify where this chroot jail is with the
##   jaildir parameter.
##
JailDir 	/var/okws/run

##
## ServiceBin <dir>
##
##   Directory within JailDir, in which to find the OKWS service
##   executables.  In cluster setting, might actually be
##   an NFS mount point. 
##
ServiceBin	svc

## SocketDir 	<dir>
##
##	Within the JailDir, where OKWS services should go to
##	read local named UNIX sockets. For instance, if the
##	the following configuration is specified:
##
##		JailDir		/var/okws/run
##		SocketDir	/sockets
##
##	then the final socket directory will live:
##
##		/var/okws/run/sockets
##
##	on the physical, unjailed file system.
##
SocketDir	/var/run

##
## CoreDumpDir <dir>
##
##   Relative to JailDir, where the services will dump core should
##   they crash.  okld will make the appropriate parent directories
##   on boot for these coredump files.  If okld is run as non-root,
##   then services will dump to whichever directory they were booted
##   into. Note that you will need to enable setgid coredumps on your
##   system, which is sometimes turned off for security reasons.  
##   On FreeBSD, for instance:
##
##	 sysctl kern.sugid_coredump=1
##       sysctl kern.coredump=1
##
##   
CoreDumpDir 	/var/coredumps

##
## ServiceLowUid <uid>
## ServiceHighUid <gid>
##
##   When run as root, okld will assign each service a unique UID,
##   so that the different services will not be able to inspect each
##   others executables, or ptrace each other. The UIDs will be picked
##   the following ranges, unless explicitly given in a "Service"
##   configuration line. Specifying a range small than the number
##   of Services will result in a configuration error.
##
ServiceLowUid	51000
ServiceHighUid	52000

##
## OkdUser <user>
## OkdGroup <group>
##
##   Specify the user/group that okd should run as.  If launched by root,
##   okd will drop down to the user/group specified after binding to the
##   appropriate listen port. The user/group must be able to read and
##   execute services, in case they need to be restarted.
##
OkdUser		www
OkdGroup	www

##
## ServiceGroup <group>
##
##   Specify the group to chgrp service binaries too; should be reserved,
##   and different from the other groups, but for now, we're just using
##   what should be on the machine.
##
ServiceGroup	www

##
## TopDir <dir>
##
##   The parent directory for OKWS standard executables, such as 
##   okd, pubd, and oklogd.
##
TopDir %%okwslibdir%%

##
## PubdExecPath <path>
##
##   Tell okd where the Publishing Daemon (pubd) can be launched from.  Okd
##   will launch pubd prior to calling chroot, so the path should be relative
##   to "TopDir". Note this must come in the config file before all
##   of the configuration directives that call upon it.
##
##   Can specify with -f the configuration file pubd uses.
##
PubdExecPath	pubd -f %%okwsconfdir%%/pub_config.dist

##
## OkdlogdExecPath <path>
##
##   Tell okd where to find "oklogd", the RPC-based logging daemon.  The
##   path should be relative to real root of the file system.
##
OklogdExecPath	oklogd

##
## OkdExecPath <path>
##
##   Tell okld where to find okd. The path should be relative to "TopDir"
##
OkdExecPath 	okd

##
## AcessLog <path>
## ErrorLog <path>
## AccessLogFmt <fmt-string>
##
##   These parameters are passed to okdlogd, telling it where and how to
##   log access and error requests. The AcessLog and ErrorLog are given
##   as relative paths to the top logging directory.  If launched as root,
##   oklogd will chroot to the JailLogDir given, and take these log
##   file locations as relative to there.
##
##   The possible values for format string are as follows:
##
##     i - remote IP address of client.
##     v - service Name
##     t - time of request
##     1 - first line of the HTTP headers in the request
##     s - status of the reply (e.g., 200 or 404)
##     b - number of bytes sent over the wire.
##     U - userID (64-bit integer; 0 if none)
##     r - Referer
##     z - length of inflated content (if gzipped, 0 if not)
## 
##   These values are subject to change with future releases.
##
LogDir		%%okws_prefix%%/logs
AccessLog	/access_log
ErrorLog	/error_log
AccessLogFmt	ivt1sbU

##
## OklogdUser <user>
## OklogdGroup <group>
##
##   The username and group the RPC-based logger should run as.  Should
##   probably be a UID not in use in other parts of the OKWS system.
##
OklogdUser	oklog
OklogdGroup	oklog

##
## UnsafeMode <0|1>
##
##   In unsafe mode, okld does not enforce that every service is run
##   by a unique UID; nor does it change the ownership of service
##   executables.  Rather, it will accept the current, possibly
##   unsafe service configuration.  This flag is clearly off by
##   default.
##
#UnsafeMode 0

##
## Management Socket
##
##   OKWS keeps a management socket open, outside the jail, for 
##   administrators to perform simple management tasks on a running
##   Web server, such as turning over log files, or relaunching 
##   Web services.  This Unix socket will be the way that a small
##   client program (okmgr) connects to the running Web server.
##
OkMgrSocket 			/var/run/okd.sock=
OkMgrSocketAccessMode		0600

##
## Service <jailed-path> <URI-path>
##
##   Tells okd to launch and route to particular services.  The first argument
##   should be the path of the service, relative to the root given by 
##   JailDir.  The second parameter is the HTTP URI that should map to this
##   service.
##
##   If the jailed path <path> is given with leading '/', then it will
##   be completed as:
##
##      <JailDir>/<path>
##
##   Withouth leading front slash, the path to the executable will
##   be completed as:
##
##      <JailDir>/<ServiceBin>/<path>
##
##   If one has specified mutliple ListenPorts above, then prepend
##   a ":" and a port # to the URI-path. An example is given below
## 
##
#Service 	foo 	:8080/foo      # listen port=8080
#
##
##   With the Service directive, it is also possible to pass 
##   environment variables specific to the particular service.
##   In the following example, we're telling the dmalloc library
##   to turn on runtime debug checks for only the login service:
##
#Service DMALLOC_OPTIONS=debug=0x4f4ed03,inter=100 login /login
#
##
##   It is also possible to set a per-service limit on requests
##   served or lifetime, with the -r and -t flags, respectively.
##   See ServiceLifeRequests and ServiceLifeTime for more details.
##
##   In this example, run logout for either 1000 requests, or for
##   30000 seconds, whichever comes first.
##
#Service logout -r 1000 -t 30000 /logout
#

##
## For test, launch 2 services; one for static pages, and the other for
## serving dummy XML-RPC requests
##
Service		static -n3		/static
Service		xmlex		/xmlrc
Service     simple      /simple
Service	    slow	/slow

##
## Gzip Compression Configuration
##
##   Gzip'ping is on by default, with a compression level of 2 on the 
##   server side (note that pubd automatically publishes with compression
##   level 9).  Turn it off by specifying "Gzip 0".  Compress level can
##   be set between 0 and 9.
##
Gzip 		1           # 0
GzipLevel 	2           # fast gzipping
GzipSmallStrLen	0x200       # smaller strings are smushed together
GzipCacheMin	0x200       # minimum size for a cached string
GzipCacheMax	0x10000     # maximum size of string to cache
GzipMemLevel	9	    # maximum memory utilization

##
## Aliases <To-Service> <From-URI>
##
##   You can alias one URI to another rather easily using this
##   directive.
##
##   Note that as above with services, ports can be specified
##   with aliases.  In this way, it is possible to have the same
##   service available simultaneously on two different ports.
##
##   For the examples below, recall that we've set the **default port**
##   to 80 via the "BindAddr" directive above.
##
#Alias	/t1	 /test1		# http://x.cc/test1 -> http://x.cc/t1
#Alias	:8081/t1 :8080/test2	# http://x.cc:8080/test2 -> http://x.cc:8081/t1
#Alias	/t1	:80/test3	# http://x.cc/test3 -> http://x.cc:8081/t1

Alias 		/static	/	# Splash-page served by 'static' service

##
## RegexAlias <To-Service> <From-URI-Regex>
##
## Map any request matching for the From-URI-Regex regex to the given 
## "To Service."
##
## Below, any URL of the form:
##
##	http://x.cc/static/foo.html
##
## also served by the 'static' service.
##
RegexAlias	/static ^(:\d+)?/static/.*$

##
## Log Timing
##
##   In each OK service, a log timer will go off every X milliseconds
##   to update a timestamp.  Every Y of those timer events, a the log
##   will be flushed to the external logging daemon. (LogTick = X, and
##   LogPeriod = Y).  The default numbers are given below.
##
LogTick		500
LogPeriod	8
SvcLog		1

##
## Client Timeout
##
##   Time the remote client's request out after a fixed amount of time --
##   this value is given in seconds.
##
ClientTimeout	60

##
## ChannelLimit
##
##   Limits amounts of data that a client is allowed to send; to stop
##   DOS attacks on memory. Specified in bytes.
##
ChannelLimit 	 2097152   # 2M

##
## CgiValueLenLimit
##
##   Limits the maxlen of a CGI value read during parsing; again, to
##   limit the damage of DOS mem attacks.  Specified in bytes. Should
##   be less than ChannelLimit
##
CgiValueLenLimit  524288   # 512k

##
## FilterCGI
##
##   Filter out those characters that might lead to XSS attacks.
##   In particular, use the following tranlsations:
##	
##	'<'	-->	"&lt;"
##	'>'	-->	"&gt;"
##	'('	-->	"&#40;"
##	'#'	-->	"&#35;"
##	'&'	-->	"&#38;"
##
##   Depending on the value given to the FilterCGI option, OKWS will
##   behave in the following manners:
##
##	0 - No XSS filtering
##	1 - Filter only the output of safe_lookup (and therefore cgi[]).
##	2 - Filter everything inserted into the CGI table.
##  
##   Obviously, 0 is the most lenient level, while 2 is the strictest.
##   Other levels might be introduced in future updates. The default
##   value is 2.
##
FilterCGI 2

##
## ErrorDoc
##
##   Specify custom error documents (in regular PUB file format).
##   Custom error documents might have variable expansions for the 
##   variables: ${STATUS}, ${SERVINFO}, ${AUXSTR}
##
ErrorDoc	404	/err/404.html
#ErrorDoc	500	/500.html


##=======================================================================
## Support For Python Scripts
##
##   If you have installed py-OKWS, then the following types of directives
##   are needed to tell OKWS where to find your interpreter, and where
##   to find your Python scripts.
## 

##
## Interpreter <local-name> <path>
##
##   Chose an interpreter, and assign it a name local to this OKWS
##   configuration that can be used in other places in this file.
##
#Interpreter PY /usr/local/bin/python

##
## Script <jailed-path> <URI>
##
##   Follows the exact template as the 'Service' directive above,
##   with the added ability to specify that the given script must be
##   run with the given interpreter.
##
#Script PY /py-svc/users.py /users


##=======================================================================
## SSL
##

## OkssldExecPath
##
##  Specifying where to find okssld will turn SSL on for this OKWS
##  instance.  okssld is the daemon in charge of negotatiating SSL
##  handshakes and the SSL tunnel abstraction.  Only it needs access
##  to SSL keys.
##
##  Can specify command line arguments and environment variables to
##  okssld as one does to okd.  The salient options are:
##
##    -D   debugging; stall for a signal before starting up
##
##  Most of the other options are constructed by okld, and are determined
##  by the okws_config options given below...
##
OkssldExecPath okssld

##
## SslUser / SslGroup
##
##  If running as root, specify a user and group for okssld to run as,
##  which of course should not interfere with the other user and
##  group IDs used.  The defaultis 'okssl' in both cases.
##
#SslUser	okssl
#SslGroup	okssl

##
## SslKeyFile
##
##  Specify where the secret server key is for SSL on this machine.
##  The .dist file is a bogus key and of course should not be used
##  in product.
##
SslKeyFile	/usr/local/etc/okws/okws.key.dist

##
## SslCertFile
##
##  Specify the location of the server certificate.
##
SslCertFile	/usr/local/etc/okws/okws.crt.dist

##
## SslPrimaryPort
##
##  The primary SSL port to listen on.  By default, incoming connections
##  on this port will be routed to all services specified in this file.
##  The default is 443, the standard https port.
##
#SslPrimaryPort	443

##
## SslListenPorts
##
##  Specify other ports that SSL will listen on.  These ports must be
##  explicitly refered to by the services that plan to use them.
##  For instance, :4430/profile, as above.
##
#SslListenPorts 444 445 4430

##
## SslTimeout
##
##  If connections don't act before this timeout expires, they will
##  be garbage collected, so okssld does not leak state...
##
#SslTimeout 100

##
## SslLog
##
##  A logfile for SSL-specific information
##
SslLog /ssl_log



## /SSL
##=======================================================================

##=======================================================================
## Other Miscellaneous Options
##

## 
## Mike Walfish's Comments on the next 5 variables
##
## 
##  ServiceFDQuota: this is the total number of client connections that
##  can be _in the process of getting handed from okd to the service_,
##  where 'in the process' means that okd is trying to send the file
##  descriptor representing the *server* side of a per-client connection
##  over a socketpair using file descriptor passing.
##
##  ServiceFDLowWat / ServiceFDHighWat: these have to do with how many
##  client connections will be open inside the child's address space.
##  When the child svc exceeds the high water mark, the svc stops
##  accepting file descriptors over the socketpair, and eventually the
##  ServiceFDQuota thing will be triggered.
##
##  OkdFDLowWat / OkdFDHighWat: these have to do with how many file
##  descriptors okd will keep open inside its own space. When the high
##  water mark is exceeded, Okd turns off accept() on its *external*
##  interface.
##
##  From the perspective of the client, if the service prints 'enabling
##  accept' or 'disabling accept', that means that the service is or is
##  no longer accepting the client's FD over the socketpair, which means
##  that while the TCP connection between client and server (in this
##  case, the TCP server is okd) is established, the connection won't
##  make progress because the service will not be reading from the
##  socket.
##
##  If we see the text 'WARNING: Service /thinner appears unresponsive',
##  it means that ServiceFDQuota has been exceeded, and that okd is no
##  longer going to pass client FDs to the child service.

##
## ServiceFDQuota
##
##   The maximum number of FDs that can be backed up when sending 
##   to a service.  If a service is not receiving FDs, it's probably
##   stuck in a bad loop, and therefore, okd should not waste additional
##   FDs on it.  Eventually, OKWS can run out.
##
##   Note that ServiceFDQuote must be set **less** than 
##   OkdFDLowWat.
##
ServiceFDQuota		500

##
## OkdFDHighWat
## ServiceFDHighWat
##
##   Number of file descriptors that OKD can have open before turning
##   off accept.
##
##   Similarly, number of open file descriptors a service can have before
##   rejecting requests.
##
OkdFDHighWat		900
ServiceFDHighWat	1000

##
## OkdFDLowWat
## ServiceFDHighWat
##
##   After OKD has turned off accept, it lets FDs drain before to the low
##   water mark befor turning accept back on.  This stops flip-flop
##   beavhior.
##
##   Similarly, number of open file descripts to drop below before
##   reallowing requests
##
##
OkdFDLowWat	800
ServiceFDLowWat	950

##
## ServiceLifeRequests
## ServiceLifeTime
##
##   Set the maximum number of requests for each service to serve,
##   or the maximum amount of time to be alive.  Whichever lifetime
##   expires first, the service will shut down, and okld will start
##   a new version.  Useful if your services have memory leaks.
##
##   Default value is 0, meaning infinite lifetime.
##
##   Can override on a service-by-service basis with the -r and -t
##   options to Service, for LifeRequests and LifeTime, respectively.
##
ServiceLifeRequests 	0
ServiceLifeTime		0


##
## SyslogLevels
##
##   Enable reporting through the following syslog levels, in order
##   of severity:
## 
##      debug info warning err alert crit emerg
##
SyslogLevels info err crit

##
##=======================================================================

// -*-c++-*-
/* $Id: ok.h 1967 2006-06-01 12:51:17Z max $ */

/*
 *
 * Copyright (C) 2002-2004 Maxwell Krohn (max@okcupid.com)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 *
 */

#ifndef _LIBAOK_OKXMLSRV_H
#define _LIBAOK_OKXMLSRV_H

# include "ok.h"
# include "xml_ahparse.h"
# include "okxmlparse.h"
# include "okxmlobj.h"
# include "tame.h"

# ifdef HAVE_EXPAT

#define MULTICALL      "system.multicall"
#define SET_DEBUG_LEV  "system.setDebugLevel"
#define OKWS_PUB       "okws.pub"
#define OKWS_PUB3      "okws.pub3"

u_int64_t xml_rpc_new_global_id ();


class okclnt_xmlrpc_base_t : public okclnt_base_t {
public:
  okclnt_xmlrpc_base_t (ptr<ahttpcon> xx, oksrvc_t *s, u_int to = 0)
    : okclnt_base_t (xx, s), _parser (xx, to) {}

  ~okclnt_xmlrpc_base_t () {}
  void parse (cbi cb) { _parser.parse (cb); }

  /*
   * A smattering of method to access data members of the underlying parser
   * object 
   */
  http_inhdr_t *hdr_p () { return _parser.hdr_p (); }
  const http_inhdr_t &hdr_cr () const { return _parser.hdr_cr (); }
  str errmsg () const { return _parser.errmsg (); }
  int errcode () const { return _parser.errcode (); }
  cgi_t &cookie () { return _parser.get_cookie (); }
  cgi_t &url () { return _parser.get_url (); }
  http_inhdr_t &hdr () { return _parser.hdr; }

  /*
   * xml_pub3_local - a function that can be implemented by subclasses
   * to do something special if there is a 'lang' field specified as
   * part of the XML-RPC argument to okws.pub.  For now, just do
   * the default, which is to ignore the lang parameter.
   *
   */
  virtual ptr<pub3::ok_iface_t> xml_pub3_local (const str &lang) 
  { return pub3(); }

  ptr<xml_top_level_t> top_level () { return _parser.top_level (); }
  ptr<const xml_top_level_t> top_level () const 
  { return _parser.top_level (); }

  void reply (xml_resp_t r);
protected:
  http_parser_xml_t _parser;
};

class oksrvc_xmlrpc_base_t : public oksrvc_t {
public:
  oksrvc_xmlrpc_base_t (int argc, char *argv[]) : 
    oksrvc_t (argc, argv), _debug_level (0) 
  { 
    set_debug_level (); 
    init_optmap ();
  }

  virtual ~oksrvc_xmlrpc_base_t () {}
  virtual void handle (okclnt_xmlrpc_base_t *b) = 0;
  virtual void handle (okclnt_xmlrpc_base_t *b, str nm,
		       xml_req_t q, xml_resp_ev_t cb) = 0;

  void do_debug (ptr<const xml_element_t> e, const char *m, u_int64_t id);

  void set_debug_level ();
  void set_debug_level (int i);

  const u_int *lookup_opt (const str &s) const { return _pub_options[s]; }
  virtual void init_optmap ();
protected:
  int _debug_level;
  qhash<str, u_int> _pub_options;
};

class okclnt_xmlrpc_t : public okclnt_xmlrpc_base_t {
public:

  okclnt_xmlrpc_t (ptr<ahttpcon> xx, oksrvc_xmlrpc_base_t *s, u_int to = 0)
    : okclnt_xmlrpc_base_t (xx, s, to), _srvc (s) { }
  void process () { _srvc->handle (this); }

  virtual bool is_authorized (xml_req_t q) { return true; }

  virtual void handle_multicall (xml_req_t q, xml_resp_ev_t cb) 
  { handle_multicall_T (q, cb); }
  virtual void handle_set_debug_level (xml_req_t q, xml_resp_ev_t cb);
  virtual void handle_okws_pub (xml_req_t q, xml_resp_ev_t cb)
  { handle_okws_pub_T (q, cb); }

protected:
  oksrvc_xmlrpc_base_t *_srvc;
private:
  void handle_multicall_T (xml_req_t q, xml_resp_ev_t cb, CLOSURE);
  void handle_okws_pub_T (xml_req_t q, xml_resp_ev_t cb, CLOSURE);
};

// See additional codes in "libokxml/okxmlparse.h" and <expat.h>
enum { OK_XMLRPC_OK = 0,
       OK_XMLRPC_ERR_NO_DATA = 201,
       OK_XMLRPC_ERR_NO_METHOD_CALL = 202,
       OK_XMLRPC_ERR_NO_METHOD_NAME = 203,
       OK_XMLRPC_ERR_METHOD_NOT_FOUND = 204,
       OK_XMLRPC_ERR_RECURSIVE = 205,
       OK_XMLRPC_ERR_BAD_PARAMS = 206,
       OK_XMLRPC_ERR_NOT_AUTHORIZED = 207 };


template<class C, class S>
class oksrvc_xmlrpc_t : public oksrvc_xmlrpc_base_t {
public:
  typedef void (C::*handler_t) (xml_req_t, xml_resp_ev_t);

  void handle (okclnt_xmlrpc_base_t *c) { handle_T (c); }
  void handle (okclnt_xmlrpc_base_t *c, str nm, xml_req_t q, xml_resp_ev_t cb)
  { handle2_T (c, nm, q, cb); }
  
  oksrvc_xmlrpc_t (int argc, char *argv[]) 
    : oksrvc_xmlrpc_base_t (argc, argv) 
  {
    regh (MULTICALL,      &okclnt_xmlrpc_t::handle_multicall);
    regh (SET_DEBUG_LEV,  &okclnt_xmlrpc_t::handle_set_debug_level);
    regh (OKWS_PUB,       &okclnt_xmlrpc_t::handle_okws_pub);
    regh (OKWS_PUB3,      &okclnt_xmlrpc_t::handle_okws_pub);
  }
  
  newclnt_t *make_newclnt (ptr<ahttpcon> lx) 
  { return New C (lx, reinterpret_cast<S *> (this)); }

protected:
  // register a handler
  void regh (const str &s, handler_t h) { _dispatch_table.insert (s, h); }
  void unreg (const str &s) { _dispatch_table.remove (s); }

  qhash<str, handler_t> _dispatch_table;
private:
  void handle_T (okclnt_xmlrpc_base_t *c, CLOSURE);
  void handle2_T (okclnt_xmlrpc_base_t *c, str nm,
		  xml_req_t q, xml_resp_ev_t cb, CLOSURE);
};

tamed template<class C, class S> void
oksrvc_xmlrpc_t<C,S>::handle_T (okclnt_xmlrpc_base_t *c)
{
  tvars {
    xml_resp_t resp;
    ptr<const xml_method_call_t> call;
    ptr<const xml_top_level_t> e;
    str nm;
    C *cli (reinterpret_cast<C *> (c));
    u_int64_t rpc_id (xml_rpc_new_global_id ());
    xml_req_t q;
  }

  do_debug (c->top_level (), "XML-RPC Input", rpc_id);
  
  if (c->errcode () != XML_PARSE_OK) {
    resp = xml_fault_obj_t (c->errcode (), c->errmsg ());
  } else if (!(e = c->top_level ()) || e->size () < 1) {
    resp = xml_fault_obj_t (OK_XMLRPC_ERR_NO_DATA, 
			    "No data given in XML call");
  } else if (!(call = e->get (0)->to_xml_method_call ())) {
    resp = xml_fault_obj_t (OK_XMLRPC_ERR_NO_METHOD_CALL, 
			    "No methodCall given in request");
  } else if (!(nm = call->method_name ())) {
    resp = xml_fault_obj_t (OK_XMLRPC_ERR_NO_METHOD_NAME,
			    "No method name given");
  } else {
    q = xml_req_t (call->params ());
    if (!cli->is_authorized (q)) {
      resp = xml_fault_obj_t (OK_XMLRPC_ERR_NOT_AUTHORIZED,
			      "Bad IP/credentials given");
    } else {
      twait { handle (cli, nm, q, mkevent (resp)); }
    }
  }

  do_debug (resp.el (), "XML-RPC Output", rpc_id);

  c->reply (resp);
}

tamed template<class C, class S> void
oksrvc_xmlrpc_t<C,S>::handle2_T (okclnt_xmlrpc_base_t *c, 
				 str nm, xml_req_t q, xml_resp_ev_t cb)
{
  tvars {
    C *cli (reinterpret_cast<C *> (c));
    typename oksrvc_xmlrpc_t<C,S>::handler_t *h;
    xml_resp_t resp;
  } 

  if (!(h = _dispatch_table[nm])) {
    resp = xml_fault_obj_t (OK_XMLRPC_ERR_METHOD_NOT_FOUND, 
			    "Method not found");
  } else {
    twait { ((*cli).*(*h)) (q, mkevent (resp)); }
  }
  cb->trigger (resp);
}

# endif /* HAVE_EXPAT */
#endif /* _LIBAOK_OKXMLSRV_H */
